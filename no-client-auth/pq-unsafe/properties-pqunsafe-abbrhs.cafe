-- This file requires the preloading files 
--  `no-client-auth/properties-abbr-hs.cafe` and
--  `no-client-auth/pq-unsafe/properties-pqunsafe-fullhs.cafe` .

-- load no-client-auth/properties-abbr-hs.cafe
-- load no-client-auth/pq-unsafe/properties-pqunsafe-fullhs.cafe

** We consider the case when PQ primitives (KEMs and signatures) are unsafe, 
**  while classical primitives (ECDH,RSA,ECDHSA) are safe.
** Define additional lemmas in this case wrt abbreviated handshake.
** Those lemmas are used to prove some properties and lemmas, 
**  which are defined in module PROP-ABBRHS, wrt module PROP-ABBRHS-CLSAFE.
mod* PROP-ABBRHS-CLSAFE {
  pr(PROP-ABBRHS)
  pr(PROP-FULLHS-CLSAFE)

  var S : Sys
  vars A A2 B B2 : Prin
  vars R R2 R3 R4 : Rand
  var CS : Suite
  var I : Sid
  vars PK PK2 : EcPublicK
  vars PK' PK2' : PqPublicK
  vars K' K2' : PqSecretK
  vars K K2 : EcSecretK
  var DL : DataL

** secrecy helper lemmas **
-- se-lm5$ + scrused-lm10
-- this is the counterpart of se-lm4 in module PROP-ABBRHS-PQSAFE 
  op se-lm4$ : Sys Prin Prin EcPublicK PqPublicK EcSecretK PqSecretK 
    Rand Rand Rand Rand DataL -> Bool
  eq se-lm4$(S,A,B,PK,PK',K2,K2',R,R2,R3,R4,DL) = 
   (not(A = intru or B = intru) and
    cf2M(A,A,B, enc(
      hsckey2(ms(ecShare(PK,K2) || encapsK(PK', K2'), 
            R || R2 || ecPublic(K2) || encapsC(PK',K2')), 
          R3 || R4), 
      h(A || B || DL))) \in nw(S) and
    not(ltkRevealed(S,B)))
   implies
    not(K2 \in knl(S) or ecSecret(PK) \in knl(S)) .

-- ephSe + knl-lm7 + scrused-lm9
  op se-lm5$ : Sys Prin Prin EcPublicK PqPublicK EcSecretK PqSecretK 
    Rand Rand Sid Suite -> Bool
  eq se-lm5$(S,A,B,PK,PK',K2,K2',R,R2,I,CS) =
   (not(A = intru or B = intru) and
    ss(S,A,B,I) = session(client,CS,
      ms(ecShare(PK,K2) || encapsK(PK',K2'), 
          R || R2 || ecPublic(K2) || encapsC(PK',K2'))) and
    not(ltkRevealed(S,B)))
   implies
    not(K2 \in knl(S) or ecSecret(PK) \in knl(S)) .
}