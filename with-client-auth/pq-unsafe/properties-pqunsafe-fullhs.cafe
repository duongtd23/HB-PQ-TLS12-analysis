-- This file requires the preloading file `with-client-auth/properties-fullhs.cafe`.

-- load with-client-auth/properties-fullhs.cafe

** We consider the case when PQ primitives (KEMs and signatures) are unsafe, 
**  while classical primitives (ECDH,RSA,ECDHSA) are safe.
** Define additional lemmas in this case wrt full handshake.
** Those lemmas are copied from `no-client-auth/pq-unsafe/properties-pqunsafe-fullhs.cafe`.
mod* PROP-FULLHS-CLSAFE {
  pr(PROP-FULLHS)
  pr(KEM-UNSAFE-CONFIG)
  var S : Sys
  vars A A2 B B2 ?A ?B2 : Prin
  vars R R2 R3 R4 : Rand
  var CS : Suite
  vars PK PK2 : EcPublicK
  vars PK' PK2' : PqPublicK
  vars K' K2' : PqSecretK
  vars K K2 : EcSecretK
  vars SIGN SIGN2 SIGN3 SIGN4 : Data
  vars N N2 ?N ?N2 ?M : Nat
  vars PSPK : PqSignPubK
  vars CSPK : ClSignPubK
  vars DL RS : DataL

** secrecy helper lemmas **
-- ephSe + se-lm1 + knl-lm7 + knl-lm6$, no ind
-- this is the counterpart of se-lm2 in module PROP-FULLHS-PQSAFE 
  op se-lm2$ : Sys Prin Prin EcPublicK PqPublicK EcSecretK PqSecretK 
    Rand Rand ClSignPubK PqSignPubK Data Data Data Data DataL -> Bool
  eq se-lm2$(S,A,B,PK,PK',K2,K2',R,R2,CSPK,PSPK,SIGN,SIGN2,SIGN3,SIGN4,DL) = 
   (not(A = intru or B = intru) and
    cfM(A,A,B, enc(
      hsckey(ms(ecShare(PK,K2) || encapsK(PK',K2'), 
            R || R2 || ecPublic(K2) || encapsC(PK',K2')), 
          R || R2), 
      h(A || B || DL || CSPK || SIGN || PSPK || SIGN2 ||
        PK || PK' || SIGN3 || SIGN4 || clCert(A) || pqCert(A) ||
        ecPublic(K2) || encapsC(PK',K2')))) \in nw(S) and
    not(ltkRevealed(S,B)))
   implies
    not(ecShare(PK,K2) \in knl(S)) .

-- ephSe + se-lm1 + knl-lm7 + knl-lm6, no ind
  op se-lm3$ : Sys Prin Prin Prin EcPublicK PqPublicK EcSecretK PqSecretK 
    Rand Rand ClSignPubK PqSignPubK Data Data Data Data DataL Nat -> Bool
  eq se-lm3$(S,A,B,B2,PK,PK',K2,K2',R,R2,CSPK,PSPK,SIGN,SIGN2,SIGN3,SIGN4,DL,N) = 
   (not(A = intru or B = intru) and
    skexM(B2,B,A, PK || PK' || SIGN3 || SIGN4, N) \in nw(S) and
    cfM(A,A,B, enc(
      hsckey(ms(ecShare(PK,K2) || encapsK(PK',K2'), 
            R || R2 || ecPublic(K2) || encapsC(PK',K2')), 
          R || R2), 
      h(A || B || DL || CSPK || SIGN || PSPK || SIGN2 ||
        PK || PK' || SIGN3 || SIGN4 || clCert(A) || pqCert(A) ||
        ecPublic(K2) || encapsC(PK',K2')))) \in nw(S) and
    ltkRevealed(S,B) and revealedAfterN(S,B,N))
   implies
    not(ecShare(PK,K2) \in knl(S)) .

** authentication helper lemmas **
-- ltkSe
  op auth-lm1$ : Sys Prin Prin Prin Prin EcPublicK PqPublicK 
    Rand Rand Data Nat Nat -> Bool
  eq auth-lm1$(S,A,B,B2,?A,PK,PK',R,R2,SIGN4,N,?M) = 
   (not(A = intru or B = intru) and 
    not(clSignKRevealed(S,B)) and
    (skexM(B2,B,A, PK || PK' ||
      clsign(clSignPriK(B), h(R || R2 || PK || PK')) ||
      SIGN4, N) \in nw(S) or
     clsign(clSignPriK(B), h(R || R2 || PK || PK')) \in knl(S)))
   implies
    skexM(B,B,?A, PK || PK' || 
      clsign(clSignPriK(B), h(R || R2 || PK || PK')) ||
      pqsign(pqSignPriK(B), h(R || R2 || PK || PK')), ?M) \in nw(S) .

** intruder knowledge lemmas **
-- ltkSe + scrused-lm2$ + scrused-lm5
  op knl-lm4$ : Sys Prin EcPublicK PqPublicK Rand Rand -> Bool
  eq knl-lm4$(S,B,PK,PK',R,R2) =
   (not(B = intru) and
    not(ltkRevealed(S,B)) and
    clsign(clSignPriK(B), h(R || R2 || PK || PK')) \in knl(S))
   implies not(ecSecret(PK) \in knl(S)) .

-- no lm
  op knl-lm6$ : Sys EcSecretK EcSecretK -> Bool
  eq knl-lm6$(S,K,K2) = (K | K2) \in knl(S)
   implies (K \in knl(S) or K2 \in knl(S)) .

-- scrused-lm2$ + scrused-lm1 + knl-lm4 + inv2
  op knl-lm8$ : Sys Prin Prin Prin EcPublicK PqPublicK 
    Rand Rand Data Nat -> Bool
  eq knl-lm8$(S,A,B,B2,PK,PK',R,R2,SIGN4,N) =
   (not(A = intru or B = intru) and
    (not(ltkRevealed(S,B)) or revealedAfterN(S,B,N)) and
    skexM(B2,B,A, PK || PK' ||
      clsign(clSignPriK(B), h(R || R2 || PK || PK')) ||
      SIGN4, N) \in nw(S))
   implies not(ecSecret(PK) \in knl(S)) .

** secret uniqueness lemmas **
  op scrused-lm2$ : Sys EcSecretK -> Bool
  eq scrused-lm2$(S,K) = K \in knl(S) implies K \in udata(S) .

  op inv1$ : Sys Prin ClSignPubK -> Bool
  eq inv1$(S,B,CSPK) = (not(B = intru) and
    clsign(clSignPriK(ca), h(B || CSPK)) \in knl(S))
    implies (CSPK = clSignPubK(B)) .
}