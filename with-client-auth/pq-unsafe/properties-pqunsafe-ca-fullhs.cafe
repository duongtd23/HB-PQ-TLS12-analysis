-- This file requires the preloading files
--  `with-client-auth/properties-ca-fullhs.cafe` and
--  `with-client-auth/pq-unsafe/properties-pqunsafe-fullhs.cafe`.

-- load with-client-auth/properties-ca-fullhs.cafe
-- load with-client-auth/pq-unsafe/properties-pqunsafe-fullhs.cafe

** We consider the case when PQ primitives (KEMs and signatures) are unsafe, 
**  while classical primitives (ECDH,RSA,ECDHSA) are safe.
** Define additional lemmas in this case wrt full handshake.
mod* PROP-CA-FULLHS-CLSAFE {
  pr(PROP-CA-FULLHS)
  pr(PROP-FULLHS-CLSAFE)
  pr(KEM-UNSAFE-CONFIG)

  var S : Sys
  vars A A2 B B2 ?A ?B : Prin
  vars R R2 R3 R4 : Rand
  vars PK PK2 : EcPublicK
  vars PK' PK2' : PqPublicK
  vars K' K2' : PqSecretK
  vars K K2 : EcSecretK
  vars SIGN SIGN2 SIGN3 SIGN4 D : Data
  vars N N2 ?N ?N2 ?M : Nat
  vars PSPK : PqSignPubK
  vars CSPK : ClSignPubK
  vars EN : PqCipher
  vars DL RS : DataL

** secrecy helper lemmas **
-- se2-lm4 + se2-lm5 + ephSe2 + knl2-lm5$ + knl-lm6$, no ind
  op se2-lm2$ : Sys Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand ClSignPubK PqSignPubK Data Data DataL -> Bool
  eq se2-lm2$(S,A,B,K,K',PK2,EN,R,R2,CSPK,PSPK,SIGN,SIGN2,DL) = 
   (not(A = intru or B = intru) and
    sfM(B,B,A, enc(
      hsskey(ms(ecShare(PK2,K) || decaps(EN,K'),
          R || R2 || PK2 || EN), R || R2), 
      h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') || 
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        CSPK || SIGN || PSPK || SIGN2 || PK2 || EN))) \in nw(S) and
    not(clSignKRevealed(S,A)))
   implies
    not(ecShare(PK2,K) \in knl(S)) .

-- se2-lm4 + se2-lm5 + ephSe2 + knl2-lm5$ + knl-lm6$, no ind
  op se2-lm3$ : Sys Prin Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand ClSignPubK PqSignPubK Data Data DataL Nat -> Bool
  eq se2-lm3$(S,A,B,A2,K,K',PK2,EN,R,R2,CSPK,PSPK,SIGN,SIGN2,DL,N2) = 
   (not(A = intru or B = intru) and 
    ckexM(A2,A,B, PK2 || EN, N2) \in nw(S) and
    sfM(B,B,A, enc(
      hsskey(ms(ecShare(PK2,K) || decaps(EN,K'),
          R || R2 || PK2 || EN), R || R2), 
      h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') || 
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        CSPK || SIGN || PSPK || SIGN2 || PK2 || EN))) \in nw(S) and
    clSignKRevealed(S,A) and revealedAfterN(S,A,N2))
   implies
    not(ecShare(PK2,K) \in knl(S)) .

** authentication helper lemmas **
-- no lemma
  op auth2-lm1$ : Sys Prin Prin Prin Prin EcSecretK PqSecretK EcSecretK PqCipher
    Rand Rand PqSignPubK Data DataL Nat -> Bool
  eq auth2-lm1$(S,A,B,A2,?B,K,K',K2,EN,R,R2,PSPK,SIGN4,DL,?M) = 
   (not(A = intru or B = intru) and 
    not(clSignKRevealed(S,A)) and
    certVerM(A2,A,B, clsign(clSignPriK(A), 
      h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') ||
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        clSignPubK(A) || clsign(clSignPriK(ca), h(A || clSignPubK(A))) ||
        PSPK || pqsign(pqSignPriK(ca), h(A || PSPK)) ||
        ecPublic(K2) || EN)) || SIGN4
      ) \in nw(S))
   implies
    ckexM(A,A,?B, ecPublic(K2) || EN, ?M) \in nw(S) .

** intruder knowledge lemmas **
-- inv2 + ephSe + scrused-lm2$ + scrused-lm3 + knl2-lm6$
  op knl2-lm4$ : Sys Prin Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand PqSignPubK Data DataL Nat -> Bool
  eq knl2-lm4$(S,A,B,A2,K,K',PK2,EN,R,R2,PSPK,SIGN4,DL,N2) = 
   (not(A = intru or B = intru) and
    ckexM(A2,A,B, PK2 || EN, N2) \in nw(S) and
    certVerM(A2,A,B, clsign(clSignPriK(A), 
      h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') ||
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        clSignPubK(A) || clsign(clSignPriK(ca), h(A || clSignPubK(A))) ||
        PSPK || pqsign(pqSignPriK(ca), h(A || PSPK)) ||
        PK2 || EN)) || SIGN4
      ) \in nw(S) and
    (not(clSignKRevealed(S,A)) or revealedAfterN(S,A,N2)))
   implies
    not(ecSecret(PK2) \in knl(S)) .

-- knl2-lm4$ + inv4, no ind
  op knl2-lm5$ : Sys Prin Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand ClSignPubK PqSignPubK Data Data DataL Nat -> Bool
  eq knl2-lm5$(S,A,B,A2,K,K',PK2,EN,R,R2,CSPK,PSPK,SIGN3,SIGN4,DL,N2) = 
   (not(A = intru or B = intru) and 
    certM(A2,A,B, A || CSPK || clsign(clSignPriK(ca), h(A || CSPK)) ||
      PSPK || pqsign(pqSignPriK(ca), h(A || PSPK))) \in nw(S) and
    ckexM(A2,A,B, PK2 || EN, N2) \in nw(S) and
    certVerM(A2,A,B,SIGN3 || SIGN4) \in nw(S) and
    clverify(CSPK, h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') ||
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        CSPK || clsign(clSignPriK(ca), h(A || CSPK)) ||
        PSPK || pqsign(pqSignPriK(ca), h(A || PSPK)) || 
        PK2 || EN), 
      SIGN3) and
    (not(clSignKRevealed(S,A)) or revealedAfterN(S,A,N2)))
   implies
    not(ecSecret(PK2) \in knl(S)) .

-- ephSe + scrused-lm3
  op knl2-lm6$ : Sys Prin Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand PqSignPubK Data DataL -> Bool
  eq knl2-lm6$(S,A,B,A2,K,K',PK2,EN,R,R2,PSPK,SIGN4,DL) = 
   (not(A = intru or B = intru) and
    certVerM(A2,A,B, clsign(clSignPriK(A), 
      h(A || B || DL || clCert(B) || pqCert(B) ||
        ecPublic(K) || keygen(K') ||
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        clSignPubK(A) || clsign(clSignPriK(ca), h(A || clSignPubK(A))) ||
        PSPK || pqsign(pqSignPriK(ca), h(A || PSPK)) ||
        PK2 || EN)) || SIGN4
      ) \in nw(S) and
    not(clSignKRevealed(S,A)))
   implies
    (ecSecret(PK2) \in udata(S) and not(ecSecret(PK2) \in knl(S))) .
}