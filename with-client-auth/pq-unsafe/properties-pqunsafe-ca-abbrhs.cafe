-- load with-client-auth/properties-ca-abbrhs.cafe
-- load with-client-auth/pq-unsafe/properties-pqunsafe-ca-fullhs.cafe

mod* PROP-CA-ABBRHS-CLSAFE {
  pr(PROP-CA-ABBRHS)
  pr(PROP-CA-FULLHS-CLSAFE)

  var S : Sys
  vars A A2 B B2 : Prin
  vars R R2 R3 R4 : Rand
  var CS : Suite
  var I : Sid
  vars PK PK2 : EcPublicK
  vars PK' PK2' : PqPublicK
  vars K' K2' : PqSecretK
  vars K K2 : EcSecretK
  var EN : PqCipher
  var DL : DataL
  vars SIGN SIGN2 SIGN3 SIGN4 D : Data
  vars N N2 : Nat
  vars PSPK : PqSignPubK
  vars CSPK : ClSignPubK
  var V : Version
  var CSs : Suites
  var KEMs : PqKemParams

** secrecy helper lemmas **
-- scrused2-lm2 + se2-lm7$
  op se2-lm6$ : Sys Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand Rand Rand DataL -> Bool
  eq se2-lm6$(S,A,B,K,K',PK2,EN,R,R2,R3,R4,DL) = 
   (not(A = intru or B = intru) and 
    sf2M(B,B,A, enc(
      hsskey2(ms(ecShare(PK2,K) || decaps(EN,K'),
          R || R2 || PK2 || EN), R3 || R4),
      h(A || B || DL))) \in nw(S) and
    not(clSignKRevealed(S,A)))
   implies
    not(K \in knl(S) or ecSecret(PK2) \in knl(S)) .

-- scrused2-lm3 + ephSe2 + knl2-lm7$
  op se2-lm7$ : Sys Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand Sid Suite -> Bool
  eq se2-lm7$(S,A,B,K,K',PK2,EN,R,R2,I,CS) = 
   (not(A = intru or B = intru) and
    ss(S,B,A,I) = session(server,CS,
      ms(ecShare(PK2,K) || decaps(EN,K'),
          R || R2 || PK2 || EN)) and
    not(clSignKRevealed(S,A)))
   implies
    not(K \in knl(S) or ecSecret(PK2) \in knl(S)) .

** intruder knowledge lemmas **
-- knl2-lm5$, no ind
  op knl2-lm7$ : Sys Prin Prin Prin EcSecretK PqSecretK EcPublicK PqCipher
    Rand Rand ClSignPubK PqSignPubK Data Data Sid Version Suites Suite PqKemParams Nat -> Bool
  eq knl2-lm7$(S,A,B,A2,K,K',PK2,EN,R,R2,CSPK,PSPK,SIGN3,SIGN4,I,V,CSs,CS,KEMs,N2) = 
   (not(A = intru or B = intru) and 
    certM(A2,A,B, A || CSPK || clsign(clSignPriK(ca), h(A || CSPK)) ||
      PSPK || pqsign(pqSignPriK(ca), h(A || PSPK))) \in nw(S) and
    ckexM(A2,A,B, PK2 || EN, N2) \in nw(S) and
    certVerM(A2,A,B,SIGN3 || SIGN4) \in nw(S) and
    clverify(CSPK, h(A || B || I || V || R || CSs || KEMs || R2 || CS ||
        clCert(B) || pqCert(B) || ecPublic(K) || keygen(K') ||
        clsign(clSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        pqsign(pqSignPriK(B), h(R || R2 || ecPublic(K) || keygen(K'))) ||
        CSPK || clsign(clSignPriK(ca), h(A || CSPK)) ||
        PSPK || pqsign(pqSignPriK(ca), h(A || PSPK)) || 
        PK2 || EN), 
      SIGN3) and
    (not(clSignKRevealed(S,A)) or revealedAfterN(S,A,N2)))
   implies
    not(ecSecret(PK2) \in knl(S)) .
}