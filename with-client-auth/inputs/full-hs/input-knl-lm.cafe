ipsgopen PROP-FULLHS .
  generate knl-lm2(S:Sys, MS:Data, RS:DataL)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm2.cafe .
:save-proof .
-- eof

ipsgopen PROP-FULLHS .
  generate knl-lm3(S:Sys, K:EcSecretK, K':PqSecretK, K2:EcSecretK, K2':PqSecretK,
    R:Rand,R2:Rand)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm3.cafe .
:save-proof .
-- eof

ipsgopen PROP-FULLHS-PQSAFE .
  inv ltkSe(S:Sys, A:Prin) .
  inv scrused-lm2(S:Sys, K':PqSecretK) .
  inv scrused-lm5(S:Sys, B:Prin, PK:EcPublicK,PK':PqPublicK, R:Rand,R2:Rand) .
  generate knl-lm4(S:Sys, B:Prin, PK:EcPublicK,PK':PqPublicK, R:Rand,R2:Rand)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm4.cafe .
:save-proof .
-- eof

ipsgopen PROP-FULLHS .
  generate knl-lm5(S:Sys, A:Prin,B:Prin,A2:Prin,D:Data)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm5.cafe .
:save-proof .
-- eof

ipsgopen PROP-FULLHS-PQSAFE .
  generate knl-lm6(S:Sys, K':PqSecretK, K2':PqSecretK)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm6.cafe .
:save-proof .
-- eof

ipsgopen PROP-FULLHS-PQSAFE .
  inv inv2(S:Sys, A:Prin) .
  inv scrused-lm2(S:Sys, K':PqSecretK) .
  inv knl-lm4(S:Sys, B:Prin, PK:EcPublicK,PK':PqPublicK, R:Rand,R2:Rand) .
  inv scrused-lm1(S:Sys, A:Prin,B:Prin,B2:Prin, PK:EcPublicK,PK':PqPublicK,
    SIGN3:Data,SIGN4:Data, N:Nat) .
  generate knl-lm8(S:Sys, A:Prin,B:Prin,B2:Prin, PK:EcPublicK,PK':PqPublicK,
    R:Rand,R2:Rand, SIGN3:Data, N:Nat)
  induction on S:Sys .
close
set-output with-client-auth/full-hs/knl-lm/knl-lm8.cafe .
:save-proof .
eof

load common.cafe protocol.cafe .
load with-client-auth/pqtls-ca.cafe with-client-auth/properties-fullhs.cafe .
load with-client-auth/inputs/full-hs/input-knl-lm.cafe .
