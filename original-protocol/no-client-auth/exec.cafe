-- to show that the specification is executable
mod* EXEC {
  pr(PQTLS + INTRUDER-CAPABILITIES)

  var S : Sys
  vars A B : Prin
  vars R R2 : Rand
  var CS : Suite
  var I : Sid
  vars K' K2' : PqSecretK
  vars K K2 : EcSecretK

-- Check that client and server can complete a session, obtaining same handshake keys
  op check1 : Sys Prin Prin EcSecretK PqSecretK 
    EcSecretK PqSecretK Rand Rand Sid Suite -> Bool
  eq check1(S,A,B,K,K',K2,K2',R,R2,I,CS) = 
    (ss(S,A,B,I) = session(client,CS,
        ms((K | K2) || (K' & K2'), 
            R || R2 || ecPublic(K2) || encapsC(keygen(K'),K2'))) and
     ss(S,B,A,I) = session(server,CS,
        ms((K | K2) || (K' & K2'), 
            R || R2 || ecPublic(K2) || encapsC(keygen(K'),K2')))) .
}
-- Proof showing that check1 can happen
open EXEC .
  ops a b : -> Prin .
  op cs : -> Suite .
  op css : -> Suites .
  op i : -> Sid .
  ops k k2 : -> EcSecretK .
  ops k' k2' : -> PqSecretK .
  op kems : -> PqKemParams .
  ops pk pk2 : -> EcPublicK .
  op pk' : -> PqPublicK .
  op en : -> PqCipher .
  op cspk : -> SignPubK .
  ops r r2 : -> Rand .
  ops s0 s1 s2 s3 s4 s5 s6 s7 s8 : -> Sys .
  ops sign sign2 cfin sfin : -> Data .
  op v : -> Version .
  
  eq (a = intru) = false .
  eq (b = intru) = false .
  eq (a = b) = false .
  eq (r = r2) = false .
  eq (k = k2) = false .
  eq (k' = k2') = false .
  eq contains(css,cs) = true .
  eq pk = ecPublic(k) .
  eq pk' = keygen(k') .
  eq pk2 = ecPublic(k2) .
  eq en = encapsC(keygen(k'),k2') .
  eq cspk = signPubK(b) .
  eq sign = sign(signPriK(ca), h(b || signPubK(b))) .
  eq sign2 = sign(signPriK(b), h(r || r2 || pk || pk')) .
  eq cfin = enc(hsckey(ms((k | k2) || (k' & k2'), 
      r || r2 || pk2 || en), r || r2),
    h(a || b || i || v || r || css || kems || r2 || cs || 
      cspk || sign ||
      pk || pk' || sign2 || pk2 || en)) .
  eq sfin = enc(hsskey(ms((k | k2) || (k' & k2'), 
      r || r2 || pk2 || en), r || r2),
    h(a || b || i || v || r || css || kems || r2 || cs || 
      cspk || sign ||
      pk || pk' || sign2 || pk2 || en)) .

  eq s0 = init .
  eq s1 = chello(s0,a,b,v,r,css,kems) .
  eq s2 = shello(s1,r2,cs,i,a,a,b,v,r,css,kems) .
  eq s3 = scert(s2,a,b,v,r2,cs,i) .
  eq s4 = skeyex(s3,k,k',a,a,b,v,r,css,kems,r2,cs,i) .

  eq s5 = ckeyex(s4,k2,k2',a,b,v,r,css,kems,b,r2,cs,i,
    cspk,sign,pk,pk',sign2,0) .
  eq s6 = cfinish(s5,a,b,v,r,css,kems,b,r2,cs,i,
    cspk,sign,pk,pk',sign2,0,k2,k2',1) .
  eq s7 = sfinish(s6,a,a,b,v,r,css,kems,r2,cs,i,
    k,k',0,pk2,en,1,cfin) .
  eq s8 = ccomp(s7,a,b,v,r,css,kems,b,r2,cs,i,
    cspk,sign,pk,pk',sign2,0,k2,k2',1,sfin) .

  red check1(s8,a,b,k,k',k2,k2',r,r2,i,cs) .   -- true is returned
  -- red ss(s8,a,b,i) .
  -- red ss(s8,b,a,i) .
close

eof
load original-protocol/primitives.cafe .
load original-protocol/protocol.cafe .
load original-protocol/no-client-auth/pqtls-noca.cafe .
load original-protocol/no-client-auth/exec.cafe .